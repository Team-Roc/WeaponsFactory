//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WeaponsFactory.DataAccess
{
    using System;
    using System.Data;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Data.Common;
    using System.Collections.Generic;
    using Telerik.OpenAccess;
    using Telerik.OpenAccess.Metadata;
    using Telerik.OpenAccess.Data.Common;
    using Telerik.OpenAccess.Metadata.Fluent;
    using Telerik.OpenAccess.Metadata.Fluent.Advanced;
    using Telerik.OpenAccess.Metadata.Relational;

	public partial class WeaponsFactoryModelMetadataSource : FluentMetadataSource
	{
		protected override IList<MappingConfiguration> PrepareMapping()
		{
            List<MappingConfiguration> configurations = new List<MappingConfiguration>();

            var reportsMapping = new MappingConfiguration<Sale>();
            reportsMapping.MapType(sale => new
            {
                SaleID = sale.SaleId,
                WeaponId = sale.WeaponId,
                WeaponName = sale.WeaponName,
                VendorName = sale.VendorName,
                Quantity = sale.Quantity,
                Income = sale.Income
            }).ToTable("Reports");
            reportsMapping.HasProperty(c => c.SaleId).IsIdentity();

            configurations.Add(reportsMapping);

            return configurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.Name = "WeaponsFactoryModel";
			container.DefaultNamespace = "WeaponsFactory.DataAccess";
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
			container.NameGenerator.RemoveCamelCase = false;
		}
	}
}
